#include <gtest/gtest.h>
#include "lib/binArray.hpp"
#include <string>


TEST(ConstructorTest, Normal) {
    // 0b0000000000000000000000000000000000000000000000000000000000000000
    BitArray a;
    EXPECT_EQ(a.to_string().compare(""), 0);
    BitArray b(10, 0b0101010101010101010101010101010101010101010101010101010101010101);
    EXPECT_EQ(b.to_string().compare("1010101010000000000000000000000000000000000000000000000000000000"), 0);
    BitArray c(0, -1);
    EXPECT_EQ(c.to_string().compare(""), 0);
    a.swap(b);
    EXPECT_EQ(b.to_string().compare(""), 0);
    EXPECT_EQ(a.to_string().compare("1010101010000000000000000000000000000000000000000000000000000000"), 0);
    BitArray d(64, 0b0101010101010101010101010101010101010101010101010101010101010101);
    EXPECT_EQ(d.to_string().compare("1010101010101010101010101010101010101010101010101010101010101010"), 0);
}

TEST(ConstructorTest, TwoBits) {
    BitArray a (65, 0b0101010101010101010101010101010101010101010101010101010101010101);
    EXPECT_EQ(a.to_string().compare("1010101010101010101010101010101010101010101010101010101010101010\n1000000000000000000000000000000000000000000000000000000000000000"), 0);
    BitArray b (64 * 2, 0b0101010101010101010101010101010101010101010101010101010101010101);
    EXPECT_EQ(b.to_string().compare("1010101010101010101010101010101010101010101010101010101010101010\n1010101010101010101010101010101010101010101010101010101010101010"), 0);
}

TEST(ResizeTest, SimpleResize){
    BitArray a;
    a.resize(64, true);
    EXPECT_EQ(a.to_string().compare("1111111111111111111111111111111111111111111111111111111111111111"), 0);
    a.resize(0, true);
    EXPECT_EQ(a.to_string().compare(""), 0);
    a.resize(10, true);
    EXPECT_EQ(a.to_string().compare("1111111111000000000000000000000000000000000000000000000000000000"),0);
    a.resize(0);
    a.resize(10, false);
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000"),0);
}

TEST(ResizeTest, NormalResize){
    BitArray a (20, (unsigned long long)-1);
    a.resize(30, false);
    a.resize(40, true);
    EXPECT_EQ(a.to_string().compare("1111111111111111111100000000001111111111000000000000000000000000"),0);
    a.resize(39, true);
    a.resize(50, false);
    a.resize(64, true);
    EXPECT_EQ(a.to_string().compare("1111111111111111111100000000001111111110000000000011111111111111"),0);
}
TEST(ResizeTest, HardResize){
    BitArray a (20, (unsigned long long)-1);
    a.resize(50, false);
    a.resize(64 * 1 + 20, true);
    EXPECT_EQ(a.to_string().compare("1111111111111111111100000000000000000000000000000011111111111111\n1111111111111111111100000000000000000000000000000000000000000000"),0);
    a.resize(51);
    EXPECT_EQ(a.to_string().compare("1111111111111111111100000000000000000000000000000010000000000000"),0);
    a.resize(64 * 1 + 10, false);
    a.resize(64*2, true);
    EXPECT_EQ(a.to_string().compare("1111111111111111111100000000000000000000000000000010000000000000\n0000000000111111111111111111111111111111111111111111111111111111"),0);
    a.resize(0, true);
    EXPECT_EQ(a.to_string().compare(""),0);
}

TEST(SetTest, onlyfirstbit){
    BitArray a (64);
    a.set(0, true);
    a.set(1, true);
    a.set(63, true);
    a.set(10, true);
    EXPECT_EQ(a.to_string().compare("1100000000100000000000000000000000000000000000000000000000000001"),0);
    a.set(0, false);
    EXPECT_EQ(a.to_string().compare("0100000000100000000000000000000000000000000000000000000000000001"),0);
    a.set(1, false);
    EXPECT_EQ(a.to_string().compare("0000000000100000000000000000000000000000000000000000000000000001"),0);
    a.set(63, false);
    EXPECT_EQ(a.to_string().compare("0000000000100000000000000000000000000000000000000000000000000000"),0);
    a.set(10, false);
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000"),0);
    a.resize(64 * 2, false);
    a.set(64*1 + 0, true);
    a.set(64*1 + 1, true);
    a.set(64*1 + 63, true);
    a.set(64*1 + 10, true);
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000\n1100000000100000000000000000000000000000000000000000000000000001"),0);
    a.set(64*1 + 0, false);
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000\n0100000000100000000000000000000000000000000000000000000000000001"),0);
    a.set(64*1 + 1, false);
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000\n0000000000100000000000000000000000000000000000000000000000000001"),0);
    a.set(64*1 + 63, false);
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000\n0000000000100000000000000000000000000000000000000000000000000000"),0);
    a.set(64*1 + 10, false);
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000"),0);
    a.resize(64 * 1 + 32);
    a.set(64 * 1 + 31);
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000100000000000000000000000000000000"),0);    
}

TEST(Push_backTest, pushTesting){
    BitArray a;
    a.push_back(true);
    a.push_back(true);
    a.resize(10, false);
    a.resize(11, true);
    a.push_back(true);    
    a.resize(63, false);
    a.push_back(true);
    a.push_back(true);
    //a.resize(65, true);  спросить этот момент, в push_back почему-то не работала эта функция корректно
    EXPECT_EQ(a.to_string().compare("1100000000110000000000000000000000000000000000000000000000000001\n1000000000000000000000000000000000000000000000000000000000000000"),0);  
}

TEST(OperationTest, operationTesting){
    BitArray a(64, 0b0101010101010101010101010101010101010101010101010101010101010101);
    BitArray b(64, 0b1010101010101010101010101010101010101010101010101010101010101010);
    BitArray c(64, 0b1010101010101010101010101010101010101010101010101010101010101010);
    BitArray e(64, 0b1010101010101010101010101010101010101010101010101010101010101010);
    BitArray f(64, 0b1010101010101010101010101010101010101010101010101010101010101010);
    b &= a;
    c |= a;
    e ^= a;
    f &= ~a;
    EXPECT_EQ(b.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000"), 0);
    EXPECT_EQ(c.to_string().compare("1111111111111111111111111111111111111111111111111111111111111111"), 0);
    EXPECT_EQ(e.to_string().compare("1111111111111111111111111111111111111111111111111111111111111111"), 0);
    EXPECT_EQ(f.to_string().compare("0101010101010101010101010101010101010101010101010101010101010101"), 0);
    EXPECT_EQ(f.count(), 32);
    EXPECT_EQ(c.count(), 64);
    EXPECT_EQ(b.count(), 0);
    EXPECT_EQ(b.any(), 0);    
    EXPECT_EQ(b.none(), 1);   
    EXPECT_EQ(f.any(), 1);    
    EXPECT_EQ(f.none(), 0);     
    EXPECT_EQ(f[0], 0);
    EXPECT_EQ(f[1], 1);
    EXPECT_EQ(f[2], 0);
    EXPECT_EQ(f[3], 1);
    EXPECT_EQ(f[4], 0);
}

TEST(BitShiftTest, operationShift){
    BitArray a;
    a.resize(16, true);
    a.resize(48, false);
    a.resize(64 + 16, true);
    a.resize(64 * 2, false);
    a <<= 19;
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000011111111111111111111111111111111000\n0000000000000000000000000000000000000000000000000000000000000000"), 0);
    a >>= 19;
    EXPECT_EQ(a.to_string().compare("0000000000000000000000000000000000000000000000001111111111111111\n1111111111111111000000000000000000000000000000000000000000000000"), 0);
    BitArray b(64 * 10, (unsigned long long) -1);
    b <<= 64*5 + 16;
    EXPECT_EQ(b.to_string().compare("1111111111111111111111111111111111111111111111111111111111111111\n1111111111111111111111111111111111111111111111111111111111111111\n1111111111111111111111111111111111111111111111111111111111111111\n1111111111111111111111111111111111111111111111111111111111111111\n1111111111111111111111111111111111111111111111110000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000"), 0);
    BitArray c(64 * 10, (unsigned long long) -1);
    c >>= 64*5 + 16;
    EXPECT_EQ(c.to_string().compare("0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000000000000000000000000000000000000000000000000000\n0000000000000000111111111111111111111111111111111111111111111111\n1111111111111111111111111111111111111111111111111111111111111111\n1111111111111111111111111111111111111111111111111111111111111111\n1111111111111111111111111111111111111111111111111111111111111111\n1111111111111111111111111111111111111111111111111111111111111111"), 0);
}

TEST (OperetionTest, allOperation){
    BitArray a(64, 0);
    BitArray b(64, (unsigned long long)-1);
    a = a & b;
    a = a ^ b;
    EXPECT_EQ(a.to_string().compare("1111111111111111111111111111111111111111111111111111111111111111"), 0);
    BitArray  aa(64, 0);
    aa = aa ^ b;
    EXPECT_EQ(aa.to_string().compare("1111111111111111111111111111111111111111111111111111111111111111"), 0);
    EXPECT_EQ(aa != a, false);
}

TEST (ClearTest, testingClear){
    BitArray a(64, 0);
    a.clear();
    EXPECT_EQ(a.get_size(), 0);
    EXPECT_EQ(a.to_string().compare(""), 0);
}